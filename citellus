#!/bin/bash

# Copyright (C) 2017   Robin Cernin (rcernin@redhat.com)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Load all necessary functions
source ${DIR}/common_functions

# Unset all variables that might be possibly set.

# By default turn off all filters.
verbose_warn=0
verbose_good=0
verbose_bad=0

while :; do
    case $1 in
        -h|-\?|--help)
            show_help
            exit
            ;;
        -f|--file)
            if [ -n "$2" ]; then
                DIRECTORY=$2
                shift
            else
                echo '[WRONG] "--file" requires a non-empty option argument.' >&2
                exit 1
            fi
            ;;
        --file=?*)
            DIRECTORY=${1#*=}
            ;;
        --file=)
            echo '[WRONG] "--file" requires a non-empty option argument.' >&2
            exit 1
            ;;
        -v|--verbose)
            set -x
            ;;
        -m|--mode)
            if [ -n "$2" ]; then
                CHECK_MODE=$2
                shift
            else
                echo '[WRONG] "--mode" requires a non-empty option argument.' >&2
                exit 1
            fi
            ;;
        -p|--plugin)
            if [ -n "$2" ]; then
                PLUGIN=$2
                shift
            else
                echo '"[WRONG] --plugin" requires a non-empty option argument.' >&2
                exit 1
            fi
            ;;
        -d|--display)
            if [ -n "$2" ]; then
                FILTER=$2
                shift
            else
                echo '[WRONG] "--display" requires a non-empty option argument.' >&2
                exit 1
            fi
            ;;
        --)
            shift
            break
            ;;
        -?*)
            echo "[WRONG] Unknown option: ${1}" >&2
            exit 1
            ;;
        *)
            break
    esac

    shift
done

# Display logo
show_logo

# Here we are going to set the display filter we want.
# By default all filters are on unless specified explicitly.

FILTER="$(echo ${FILTER} | tr ',' ' ')"
if [ -z "${FILTER}" ]
then 
  # All filters are on if no filter was specified.
  verbose_warn=1
  verbose_good=1
  verbose_bad=1
fi

if [ -n "${FILTER}" ]
then
  for filter in ${FILTER}
  do
    match_filter ${filter} "warn good bad"
    if [[ "${FOUND}" -eq 1 ]] && [[ ${filter} = "good" ]]
    then
      verbose_good=1
    elif [[ "${FOUND}" -eq 1 ]] && [[ ${filter} = "bad" ]]
    then
      verbose_bad=1
    elif [[ "${FOUND}" -eq 1 ]] && [[ ${filter} = "warn" ]]
    then
      verbose_warn=1
    fi
  done
fi

if [ -z "${CHECK_MODE}" ] || { [ "${CHECK_MODE}" = "sosreport" ] && [ ! -d "${DIRECTORY}" ] ;} 
then
  bad "Check mode wasn't specified or sosreport directory is wrong." 
  exit 1
fi

# Now we should already know if we are doing live or sosreport check, hence we source relevant file.
if [ ${CHECK_MODE} = "live" ]
then
  source ${DIR}/live_functions
elif [ ${CHECK_MODE} = "sosreport" ]
then
  source ${DIR}/sosreport_functions
else
  bad "Please specify correct check mode. Currently it is either sosreport or live."
  exit 1
fi

init_program

PYTHON="/usr/bin/python"
PLUGIN="$(echo ${PLUGIN} | tr ',' ' ')"

# Here we check if any plugin was specified.
if [ -n "${PLUGIN}" ]
then
  for plugin in ${PLUGIN}
  do

    # Go thru the list of plugins and check they have relevant folder in ./plugins
    # and if we have found plugin in ./plugins then we will execute the scripts.

    match_filter "./plugins/${plugin}" "./plugins/*"
    if [[ "${FOUND}" -eq "1" ]]
    then

      # This if clause is executed only if plugin was set to OpenStack.
      # We are printing the node either controller, compute or director and
      # its version.

      if [ "${plugin}" = "openstack" ]
	then
          get_version
	  discover_node
	  print_version
      fi

      for FILE in ./plugins/"${plugin}"/*
      do
        [ -f "${FILE}" ] || continue
        EXTENSION=${FILE##*.}
	if [ "${plugin}" = "openstack" ]
	  then
	    case ${EXTENSION} in
	      sh) 
                 source ${FILE}
                 ;;
	      py) ${PYTHON} ${FILE} ${DIRECTORY} ;;
	      *) echo "File: ${FILE}. Usupported format." ;;
	    esac
          else
            case ${EXTENSION} in
              sh)
                 source ${FILE}
                 ;;
              py) ${PYTHON} ${FILE} ${DIRECTORY} ;;
              *) echo "File: ${FILE}. Usupported format." ;;
            esac
        fi
      done
    fi
  done
fi

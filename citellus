#!/bin/bash

# Copyright (C) 2017   Robin Cernin (rcernin@redhat.com)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Load all necessary functions
source ${DIR}/load_functions

# Unset all variables that might be possibly set.
DIRECTORY=
DISCOVERED_NODE=
VERSION=
TARGET_HOSTNAME=
PCS_DIRECTORY=
VERSION_CHECK=
PLUGIN=

# Set display filters
verbose_good=0
verbose_bad=0
verbose_warn=0

while :; do
    case $1 in
        -h|-\?|--help)
            show_help
            exit
            ;;
        -f|--file)
            if [ -n "$2" ]; then
                DIRECTORY=$2
                shift
            else
                bad '"--file" requires a non-empty option argument.' >&2
                exit 1
            fi
            ;;
        --file=?*)
            DIRECTORY=${1#*=}
            ;;
        --file=)
            bad '"--file" requires a non-empty option argument.' >&2
            exit 1
            ;;
        -v|--verbose)
            set -x
            ;;
        -p|--plugin)
            if [ -n "$2" ]; then
                PLUGIN=$2
                shift
            else
                bad '"--plugin" requires a non-empty option argument.' >&2
                exit 1
            fi
            ;;
        -d|--display)
            if [ -n "$2" ]; then
                FILTER=$2
                shift
            else
                bad '"--display" requires a non-empty option argument.' >&2
                exit 1
            fi
            ;;
        --)
            shift
            break
            ;;
        -?*)
            bad "Unknown option: ${1}" >&2
            exit 1
            ;;
        *)
            break
    esac

    shift
done

if [ ! -d "${DIRECTORY}" ]
then
  bad "Uh, oh, ${DIRECTORY} is not directory."
  exit 1
fi

echo "_________ .__  __         .__  .__                "
echo "\_   ___ \|__|/  |_  ____ |  | |  |  __ __  ______"
echo "/    \  \/|  \   __\/ __ \|  | |  | |  |  \/  ___/"
echo "\     \___|  ||  | \  ___/|  |_|  |_|  |  /\___ \ "
echo " \______  /__||__|  \___  >____/____/____//____  >"
echo "        \/              \/                     \/ "

# Here we are going to set the display filter we want.
# By default all filters are on unless specified explicitly.

FILTER="$(echo ${FILTER} | tr ',' ' ')"
if [ -z "${FILTER}" ]
then 
  # All filters are on if no filter was specified.
  verbose_warn=1
  verbose_good=1
  verbose_bad=1
fi

if [ -n "${FILTER}" ]
then
  for filter in ${FILTER}
  do
    match_filter ${filter} "warn good bad"
    if [[ "${FOUND}" -eq 1 ]] && [[ ${filter} = "good" ]]
    then
      verbose_good=1
    elif [[ "${FOUND}" -eq 1 ]] && [[ ${filter} = "bad" ]]
    then
      verbose_bad=1
    elif [[ "${FOUND}" -eq 1 ]] && [[ ${filter} = "warn" ]]
    then
      verbose_warn=1
    fi
  done
fi

TARGET_HOSTNAME="$(cat ${DIRECTORY}/hostname)"
echo "SOSreport was created at $(cat ${DIRECTORY}/date)"
echo "Hostname: ${TARGET_HOSTNAME}"

# Check if we are running openstack plugin if empty by default to openstack
if [ -z "${PLUGIN}" ] || [ "${PLUGIN}" = "openstack" ]
then 
  PLUGIN="openstack"
  # Here we are going to discover which node type [director,controller,compute] we
  # are running against.
  discover_node
  get_version
  echo "Discovered node: ${DISCOVERED_NODE}"
  echo "Version: ${VERSION}"
  if [ -n "${PACKSTACK}" ]
  then echo "Type: POC-type environment installed with Packstack" 
  fi
fi

PYTHON="/usr/bin/python"
TMPFILE="$(mktemp /tmp/cittelus-script.XXXXXX)"

# Go thru the all existing .conf files inside DISCOVERED_NODE.d directory/.
for FILE in ./plugins/"${PLUGIN}"/generic/all/* ./plugins/"${PLUGIN}"/generic/"${DISCOVERED_NODE}"/* ./plugins/"${PLUGIN}"/"${VERSION}"/generic/* ./plugins/"${PLUGIN}"/"${VERSION}"/"${DISCOVERED_NODE}"/*; do
    [ -e "$FILE" ] || continue
    EXTENSION=${FILE##*.} 
    case ${EXTENSION} in
      sh) 
          source "${FILE}" > "${TMPFILE}"

          PASS=$(grep ".*\[OK\]" "${TMPFILE}" | wc -l)
          FAIL=$(grep ".*\[WRONG\]" "${TMPFILE}" | wc -l)
          WARNING=$(grep ".*\[WARN\]" "${TMPFILE}" | wc -l)

          if [[ "${FAIL}" -eq "0" ]] && [[ "${WARNING}" -eq "0" ]]
          then
            RESULT=$(
                     tput setaf 2
                     printf "%s" "PASSED "
                     tput sgr0
                    )
          elif [[ "${FAIL}" -eq "0" ]] && [[ ! "${WARNING}" -eq "0" ]]
          then
            RESULT=$(
                     tput setaf 3
                     printf "%s" "WARNING"
                     tput sgr0
                    )
          else
            RESULT=$(
                     tput setaf 1 
                     printf "%s" "FAILED "
                     tput sgr0
                    )
          fi         

          if [[ ${RESULT} =~ "PASS" ]] && [[ ${verbose_good} -eq "0" ]]
          then
            continue
          else
	    printf -v line "+%*s+" "77"
	    echo ${line// /-}
	    printf "| %-75s %s\n" "${REFNAME}" "|"
	    printf -v line "+%*s+ %-30s |" "44"
	    echo ${line// /-}
	    printf "| PASS: %-9s FAILED: %-6s WARNING: %-2s %-16s Result: %s %s\n" \
		   "${PASS}" "${FAIL}" "${WARNING}" "|" "${RESULT}" "|"
	    printf -v line "+%*s+" "77"
	    echo ${line// /-}

	    $(which cat) "${TMPFILE}"
	    $(which rm) -f "${TMPFILE}"
          fi
          ;;

      py) ${PYTHON} ${FILE} ${DIRECTORY} ;;
      *) echo "File: ${FILE}. Usupported format." ;;
    esac
done

#!/bin/bash

# Copyright (C) 2017   Robin Cernin (rcernin@redhat.com)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

show_logo(){
  echo "_________ .__  __         .__  .__                "
  echo "\_   ___ \|__|/  |_  ____ |  | |  |  __ __  ______"
  echo "/    \  \/|  \   __\/ __ \|  | |  | |  |  \/  ___/"
  echo "\     \___|  ||  | \  ___/|  |_|  |_|  |  /\___ \ "
  echo " \______  /__||__|  \___  >____/____/____//____  >"
  echo "        \/              \/                     \/ "
}


show_help(){
  # Show usage info
  show_logo

  echo ""
  echo "Usage: ${0##*/} [-hv] [-d warn,good,bad] [-m live,sosreport] [-p openstack,other] [-f DIRECTORY]..."
  echo "Do stuff with sosreport and write the result to standard output."
  echo ""
  echo "              -h                  display this help and exit"
  echo "              -f sosreport-*      opens a sosreport directory for analysis"
  echo "              -d warn,good,bad    will display only filtered messages"
  echo "              -p openstack,other  select plugin to run from plugins"
  echo "              -m live,sosreport   select check mode, either sosreport or live"
  echo "              -v                  verbose mode."
  
}

print_version(){

  echo "Discovered node: ${DISCOVERED_NODE}"
  echo "Version: ${VERSION}"
  if [ -n "${PACKSTACK}" ]
    then echo "Type: POC-type environment installed with Packstack"
  fi

}

execute_sh(){

  source "${FILE}" > "${TMPFILE}"

  PASS=$(grep ".*PASS:" "${TMPFILE}" | wc -l)
  FAIL=$(grep ".*FAILED:" "${TMPFILE}" | wc -l)
  WARNING=$(grep ".*WARNING:" "${TMPFILE}" | wc -l)

  if [[ "${FAIL}" -eq "0" ]] && [[ "${WARNING}" -eq "0" ]]
  then
    RESULT=$(
      tput setaf 2
      printf "%s" "PASSED "
      tput sgr0
     )
  elif [[ "${FAIL}" -eq "0" ]] && [[ ! "${WARNING}" -eq "0" ]]
  then
    RESULT=$(
      tput setaf 3
      printf "%s" "WARNING"
      tput sgr0
     )
  else
    RESULT=$(
      tput setaf 1 
      printf "%s" "FAILED "
      tput sgr0
     )
  fi         

  if [[ ${RESULT} =~ "PASS" ]] && [[ ${verbose_good} -eq "0" ]]
  then
    continue
  else
    printf -v line "+%*s+" "77"
    echo ${line// /-}
    printf "| %-75s %s\n" "${REFNAME}" "|"
    printf -v line "+%*s+ %-30s |" "44"
    echo ${line// /-}
    printf "| PASS: %-9s FAILED: %-6s WARNING: %-2s %-16s Result: %s %s\n" \
    "${PASS}" "${FAIL}" "${WARNING}" "|" "${RESULT}" "|"
    printf -v line "+%*s+" "77"
    echo ${line// /-}

    $(which cat) "${TMPFILE}"
    $(which rm) -f "${TMPFILE}"
  fi

}

good(){
    if [ ${verbose_good} -eq "1" ]
    then
      tput setaf 2
      echo "PASS:    ${1}"  
      tput sgr0
    fi
}

bad(){
    if [ ${verbose_bad} -eq "1" ]
    then
      tput setaf 1
      echo "FAILED:  ${1}"  
      tput sgr0
    fi
}

warn(){
    if [ ${verbose_warn} -eq "1" ]
    then
      tput setaf 3
      echo "WARNING: ${1}"
      tput sgr0
    fi
}

match_filter(){

    FOUND=0
    local filter=$1 j
    shift
    for j in ${@}
    do
    if [[ "${filter}" = $j ]]
    then
      FOUND=1
      break
    fi
    done
}

grep_file_rev(){

  if [ -e "$1" ]
  then
    if grep -i -q "${2}" ${1}
    then
      bad "Checking ${2} is in ${1}"
      if [ -e "$3" ]
      then
        echo "${3}"
      fi
    else
      good "Checking ${2} is NOT in ${1}"
    fi
  else
    warn "Missing file ${1}"
  fi
	
}

grep_file(){

  if [ -e "$1" ]
  then
    if grep -i -q "${2}" ${1}
    then
      good "Checking ${2} is in ${1}"
    else
      bad "Checking ${2} is in ${1}"
      if [ -n "$3" ]
      then
        echo "${3}"
        echo ""
      fi
    fi
  else
    warn "Missing file ${1}"
  fi
	
}

# vim: ts=2 sw=2 et
